// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Paddle = (function(_super) {
    __extends(Paddle, _super);

    function Paddle() {
      Paddle.__super__.constructor.apply(this, arguments);
      this.width = 20;
      this.height = 100;
      this.score = 0;
      this.y = game.height / 2 - this.height / 2;
    }

    Paddle.prototype.update = function() {
      Paddle.__super__.update.apply(this, arguments);
      return this.y = Math.min(Math.max(this.y, 0), game.height - this.height);
    };

    return Paddle;

  })(Entity);

  window.Player = (function(_super) {
    __extends(Player, _super);

    function Player() {
      Player.__super__.constructor.apply(this, arguments);
      this.x = 10;
    }

    Player.prototype.update = function() {
      var speed;
      Player.__super__.update.apply(this, arguments);
      speed = 15;
      return this.movePlayerOrDown(speed);
    };

    Player.prototype.movePlayerOrDown = function(speed) {
      if (game.keyPressed.up) {
        return this.yVelocity = -speed;
      } else if (game.keyPressed.down) {
        return this.yVelocity = speed;
      } else {
        return this.yVelocity = 0;
      }
    };

    return Player;

  })(Paddle);

  window.Bot = (function(_super) {
    __extends(Bot, _super);

    function Bot() {
      Bot.__super__.constructor.apply(this, arguments);
      this.x = game.width - this.width - 10;
    }

    Bot.prototype.update = function() {
      var speed;
      Bot.__super__.update.apply(this, arguments);
      speed = 8;
      if (this.y < game.ball.y) {
        return this.yVelocity = speed;
      } else if (this.y > game.ball.y) {
        return this.yVelocity = -speed;
      } else {
        return this.yVelocity = 0;
      }
    };

    return Bot;

  })(Paddle);

}).call(this);
