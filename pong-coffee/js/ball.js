// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Ball = (function(_super) {
    __extends(Ball, _super);

    function Ball() {
      Ball.__super__.constructor.apply(this, arguments);
      this.width = 20;
      this.height = 20;
      this.reset();
    }

    Ball.prototype.reset = function() {
      var max, min;
      this.x = game.width / 2 - this.width;
      this.y = game.height / 2 - this.height;
      min = -5;
      max = 5;
      this.yVelocity = Math.floor(Math.random() * (max - min + 1) + min);
      return this.xVelocity = Math.random() > 0.5 ? 5 : -5;
    };

    Ball.prototype.update = function() {
      var hitter;
      Ball.__super__.update.apply(this, arguments);
      if (this.y > game.height - this.height || this.y < 0) {
        this.yVelocity *= -1;
      }
      if (this.x > game.width) {
        game.player.score += 1;
        this.reset();
      }
      if (this.x < 0) {
        game.bot.score += 1;
        this.reset();
      }
      hitter = null;
      if (this.intersect(game.bot)) {
        hitter = game.bot;
      } else if (this.intersect(game.player)) {
        hitter = game.player;
      }
      if (hitter) {
        this.xVelocity *= -1.1;
        return this.yVelocity += hitter.yVelocity / 4;
      }
    };

    return Ball;

  })(Entity);

}).call(this);
